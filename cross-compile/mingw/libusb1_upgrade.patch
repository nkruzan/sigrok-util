The sigrok project build references a libusb feature which is not yet
available in mainline libusb1, enabling the RAW_IO policy by default
to improve performance on Windows. And applies an autotools fix to the
mainline MXE build rules.

See the libusb pull request https://github.com/libusb/libusb/pull/1069
for a discussion of the RAW_IO policy tweak.

Manipulation of the libusb1 configuration in the MXE setup avoids the
necessity for a custom libusb1 build as a step in the sigrok procedure.
When the MXE modification is considered undesirable, then the sigrok
build script or the manual sequence of building needs to get adjusted
to include a local libusb1 build which then gets referenced in the
configure step.


diff --git a/src/libusb1.mk b/src/libusb1.mk
index ab01bf69..53aed36e 100644
--- a/src/libusb1.mk
+++ b/src/libusb1.mk
@@ -19,7 +19,7 @@ define $(PKG)_UPDATE
 endef
 
 define $(PKG)_BUILD
-    cd '$(1)' && ./configure \
+    cd '$(1)' && autoreconf -i && ./configure \
         $(MXE_CONFIGURE_OPTS)
     $(MAKE) -C '$(1)' -j '$(JOBS)' install
 

diff --git a/src/libusb1-1-fixes.patch b/src/libusb1-1-fixes.patch
new file mode 100644
index 00000000..6cdeb0c4
--- /dev/null
+++ b/src/libusb1-1-fixes.patch
@@ -0,0 +1,31 @@
+commit f341e4a086edd4f45c2db4df892a52ebfd52ac5b
+Author:     Petteri Aimonen <jpa@git.mail.kapsi.fi>
+AuthorDate: 2022-02-11 12:08:01 +0200
+Commit:     Petteri Aimonen <jpa@git.mail.kapsi.fi>
+CommitDate: 2022-02-11 12:08:01 +0200
+
+    WinUSB: Use RAW_IO when transfer size is divisible by 512 bytes
+---
+ libusb/os/windows_winusb.c | 9 +++++++++
+ 1 file changed, 9 insertions(+)
+
+diff --git a/libusb/os/windows_winusb.c b/libusb/os/windows_winusb.c
+index a03d6a51216a..a0ac0c609e99 100644
+--- a/libusb/os/windows_winusb.c
++++ b/libusb/os/windows_winusb.c
+@@ -3086,6 +3086,15 @@ static int winusbx_submit_bulk_transfer(int sub_api, struct usbi_transfer *itran
+ 	set_transfer_priv_handle(itransfer, handle_priv->interface_handle[current_interface].dev_handle);
+ 	overlapped = get_transfer_priv_overlapped(itransfer);
+ 
++	if (sub_api == SUB_API_WINUSB)
++	{
++		// Use RAW_IO when transfer size is divisible by 512 bytes.
++		UCHAR policy = (transfer->length % 512 == 0);
++		if (!WinUSBX[sub_api].SetPipePolicy(winusb_handle, transfer->endpoint, RAW_IO, sizeof(UCHAR), &policy)) {
++				usbi_err(TRANSFER_CTX(transfer), "failed to set RAW_IO for endpoint %02X", transfer->endpoint);
++		}
++	}
++
+ 	if (IS_XFERIN(transfer)) {
+ 		usbi_dbg(TRANSFER_CTX(transfer), "reading %d bytes", transfer->length);
+ 		ret = WinUSBX[sub_api].ReadPipe(winusb_handle, transfer->endpoint, transfer->buffer, transfer->length, NULL, overlapped);
